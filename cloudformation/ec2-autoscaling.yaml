AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group para instancias EC2 de Ponchoneta (Usando Rol IAM existente, AMI hardcodeada)

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  TargetGroup: 
    Type: String
  DBEndpoint:
    Type: String
  DBName:
    Type: String
  DBUser:
    Type: String
  DBPasswordValue:
    Type: String
    NoEcho: true # Importante para que no se loguee en eventos de CloudFormation
  ExistingInstanceProfileName:
    Type: String
    Default: EMR_EC2_DefaultRole

Resources:
  PonchonetaLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: PonchonetaLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-09f4814ae750baed6 
        InstanceType: t3.micro
        SecurityGroupIds:
          - !Ref AppSecurityGroup
        IamInstanceProfile:
          Name: !Ref ExistingInstanceProfileName
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              echo "--- Iniciando UserData Script ---"
              echo "DBPasswordValue recibido: ${PassedDBPassword}" # Para depurar, ¡REMOVER EN PRODUCCIÓN!

              yum update -y
              echo "--- Instalando Node.js y Git ---"
              curl -sL https://rpm.nodesource.com/setup_16.x | bash - 
              yum install -y nodejs git

              echo "--- Clonando repositorio ---"
              cd /home/ec2-user
              git clone https://github.com/felipevelasco7/PonchonetaEcommerce.git
              chown -R ec2-user:ec2-user PonchonetaEcommerce
              cd PonchonetaEcommerce/backend

              echo "--- Configurando variables de entorno para la aplicacion ---"
              echo "DB_HOST=${DBEndpoint}" > .env
              echo "DB_NAME=${DBName}" >> .env
              echo "DB_USER=${DBUser}" >> .env
              # Importante usar comillas para asegurar que se manejen caracteres especiales en la contraseña
              echo "DB_PASSWORD=\"${PassedDBPassword}\"" >> .env 
              echo "PORT=3000" >> .env
              chown ec2-user:ec2-user .env
              
              echo "Contenido de .env (excepto contraseña para log):"
              grep -v "DB_PASSWORD" .env || echo ".env no encontrado o vacío (sin DB_PASSWORD)"

              echo "--- Instalando dependencias de la aplicacion y PM2 ---"
              npm install
              npm install -g pm2

              echo "--- Iniciando aplicacion con PM2 ---"
              sudo -u ec2-user pm2 start app.js --name ponchoneta-backend -o app.log -e app.err.log --log-date-format "YYYY-MM-DD HH:mm Z"
              
              echo "--- Configurando PM2 startup script ---"
              # El siguiente comando genera el comando real que se debe ejecutar
              STARTUP_COMMAND_OUTPUT=$(sudo -u ec2-user pm2 startup systemd -u ec2-user --hp /home/ec2-user)
              echo "Salida de pm2 startup: $STARTUP_COMMAND_OUTPUT"
              ACTUAL_STARTUP_COMMAND=$(echo "$STARTUP_COMMAND_OUTPUT" | grep "sudo env PATH")

              if [ -n "$ACTUAL_STARTUP_COMMAND" ]; then
                  echo "Ejecutando comando de inicio de PM2: $ACTUAL_STARTUP_COMMAND"
                  eval "$ACTUAL_STARTUP_COMMAND" 
              else
                  echo "Error: No se pudo generar el comando de inicio de PM2 de la salida."
                  # Intento alternativo si el grep falla
                  if sudo -u ec2-user pm2 startup systemd -u ec2-user --hp /home/ec2-user; then
                      echo "PM2 startup ejecutado (método alternativo)."
                  else
                      echo "Fallo el método alternativo de pm2 startup."
                  fi
              fi
              
              sudo -u ec2-user pm2 save
              echo "--- UserData Script Finalizado ---"
            - PassedDBPassword: !Ref DBPasswordValue # Mapeo para usar en el script UserData

  PonchonetaAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref PonchonetaLaunchTemplate
        Version: !GetAtt PonchonetaLaunchTemplate.LatestVersionNumber
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "1"
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags: 
        - Key: Name
          Value: PonchonetaASG
          PropagateAtLaunch: true

Outputs:
  AutoScalingGroupName:
    Description: Nombre del Auto Scaling Group
    Value: !Ref PonchonetaAutoScalingGroup
    Export:
      Name: PonchonetaAutoScalingGroup